<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>文章 on Kubernetes From Scratch</title>
    <link>http://example.org/note/</link>
    <description>Recent content in 文章 on Kubernetes From Scratch</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Supported by OOCLAB</copyright>
    <lastBuildDate>Sat, 04 May 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://example.org/note/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>安装 vagrant-vbguest 插件</title>
      <link>http://example.org/note/vagrant-vbguest/</link>
      <pubDate>Sat, 04 May 2019 12:40:00 +0800</pubDate>
      
      <guid>http://example.org/note/vagrant-vbguest/</guid>
      <description>参考：
 VirtualBox Guest Additions https://github.com/dotless-de/vagrant-vbguest/  步骤 1. 下载 iso 在 https://download.virtualbox.org/virtualbox 找到对应的版本，下载并挂载 iso。示例：
wget https://download.virtualbox.org/virtualbox/6.0.6/VBoxGuestAdditions_6.0.6.iso sudo cp VBoxGuestAdditions_6.0.6.iso /Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso 2. 安装 vagrant plugin vagrant plugin install vagrant-vbguest 3. 配置 Vagrantfile 说明
 Mac 平台如果 /Applications/VirtualBox.app/Contents/MacOS/VBoxGuestAdditions.iso 存在，无需配置 iso_path 。
 Vagrantfile 中添加配置示例：
# 共享目录（需要安装好 guest 驱动才可以注销掉下面几行） config.vm.synced_folder ENV[&amp;#34;KFS_HOME&amp;#34;], &amp;#34;/kfslab&amp;#34;, type: &amp;#34;virtualbox&amp;#34; if Vagrant.has_plugin?(&amp;#34;vagrant-vbguest&amp;#34;) config.vbguest.auto_update = false end 其他 强制重新安装
vagrant vbguest --do install FAQ setup: command not found ==&amp;gt; k8s-node-1: Checking for guest additions in VM.</description>
    </item>
    
    <item>
      <title>kubeconfig</title>
      <link>http://example.org/note/kubeconfig/</link>
      <pubDate>Thu, 02 May 2019 17:30:00 +0800</pubDate>
      
      <guid>http://example.org/note/kubeconfig/</guid>
      <description>kubeconfig file 如果希望 kubectl 默认使用某个配置文件，可以：
方法一：可以直接复制一个配置文件到指定位置： cp admin.kubeconfig ~/.kube/config 方法二：设置环境变量 export KUBECONFIG=/path/to/admin.</description>
    </item>
    
    <item>
      <title>crictl</title>
      <link>http://example.org/note/crictl/</link>
      <pubDate>Thu, 02 May 2019 13:00:00 +0800</pubDate>
      
      <guid>http://example.org/note/crictl/</guid>
      <description> crictl --runtime-endpoint unix:///var/run/containerd/containerd.sock ps -a 配置 /etc/crictl.yaml :
cat &amp;gt; /etc/crictl.yaml &amp;lt;&amp;lt;EOF runtime-endpoint: unix:///run/containerd/containerd.sock image-endpoint: unix:///run/containerd/containerd.sock timeout: 10 debug: true EOF 现在执行 crictl 命令，无需指定 --runtime-endpoint：
crictl ps -a 加载 images 需要使用 containerd 安装安装包中的 ctr 命令
ctr -n=k8s.io images import /tmp/dashboard.tar 参考  CRICTL User Guide  </description>
    </item>
    
    <item>
      <title>cni</title>
      <link>http://example.org/note/cni/</link>
      <pubDate>Wed, 01 May 2019 20:00:00 +0800</pubDate>
      
      <guid>http://example.org/note/cni/</guid>
      <description> HOW A CONTAINER RUNTIME IS USING CNI  </description>
    </item>
    
    <item>
      <title>cfssl</title>
      <link>http://example.org/note/cfssl/</link>
      <pubDate>Tue, 30 Apr 2019 23:30:00 +0800</pubDate>
      
      <guid>http://example.org/note/cfssl/</guid>
      <description>查看 ca.pem 证书信息：
cfssl certinfo -cert ca.</description>
    </item>
    
    <item>
      <title>Docker image 在Qiang外怎么办？</title>
      <link>http://example.org/note/docker-image-gfw/</link>
      <pubDate>Mon, 29 Apr 2019 21:50:00 +0800</pubDate>
      
      <guid>http://example.org/note/docker-image-gfw/</guid>
      <description>创建 trans_image.sh 脚本：
#! /bin/bash  # https://hub.docker.com # 第一次运行需要执行 `docker login` 验证帐户 # 将指定的 image 转移到 hub.docker.com 上 # 使用 omio 组织名称 # https://hub.docker.com/u/omio/dashboard/ ORG=omio # gcr.io/google_containers/pause-amd64:3.0 -&amp;gt; $ORG/gcr.io.google_containers.pause-amd64:3.0 function trans() { ORIG_NAME=$1 NEW_NAME=`echo ${ORIG_NAME} | sed &amp;#39;s@/@.@g&amp;#39;` docker pull $ORIG_NAME docker tag $ORIG_NAME $ORG/$NEW_NAME docker push $ORG/$NEW_NAME } for var in &amp;#34;$@&amp;#34; do echo &amp;#34;==&amp;gt; $var&amp;#34; trans $var done 比如将 k8s.gcr.io/pause:3.1 转换为 omio/k8s.gcr.io.pause:3.1 ，执行：
bash trans_image.sh k8s.gcr.io/pause:3.1 参考： - Docker image 在Qiang外怎么办？</description>
    </item>
    
  </channel>
</rss>