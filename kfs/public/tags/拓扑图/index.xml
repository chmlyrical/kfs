<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>拓扑图 on Kubernetes From Scratch</title>
    <link>http://example.org/tags/%E6%8B%93%E6%89%91%E5%9B%BE/</link>
    <description>Recent content in 拓扑图 on Kubernetes From Scratch</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Supported by OOCLAB</copyright>
    <lastBuildDate>Sun, 28 Apr 2019 12:40:00 +0800</lastBuildDate>
    
	<atom:link href="http://example.org/tags/%E6%8B%93%E6%89%91%E5%9B%BE/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>配置 PKI</title>
      <link>http://example.org/kfs/v1.14.1/pki/</link>
      <pubDate>Sun, 28 Apr 2019 12:40:00 +0800</pubDate>
      
      <guid>http://example.org/kfs/v1.14.1/pki/</guid>
      <description>在 Kubernetes 集群中，各个组件间通过 TLS 进行通信。组件的证书可以代表其唯一性（ Common Name ）。搭建 PKI 可以自由签发证书给需要的组件。
初始化 CA 初始化 Certificate Authority ，创建 pki 目录：
mkdir -pv ${KFS_CONFIG} cd ${KFS_CONFIG} 创建 ca-config.json ：
{ &amp;#34;signing&amp;#34;: { &amp;#34;default&amp;#34;: { &amp;#34;expiry&amp;#34;: &amp;#34;8760h&amp;#34; }, &amp;#34;profiles&amp;#34;: { &amp;#34;kubernetes&amp;#34;: { &amp;#34;usages&amp;#34;: [&amp;#34;signing&amp;#34;, &amp;#34;key encipherment&amp;#34;, &amp;#34;server auth&amp;#34;, &amp;#34;client auth&amp;#34;], &amp;#34;expiry&amp;#34;: &amp;#34;8760h&amp;#34; } } } } 创建 ca-csr.json ：
{ &amp;#34;CN&amp;#34;: &amp;#34;KFS&amp;#34;, &amp;#34;key&amp;#34;: { &amp;#34;algo&amp;#34;: &amp;#34;rsa&amp;#34;, &amp;#34;size&amp;#34;: 2048 }, &amp;#34;names&amp;#34;: [ { &amp;#34;C&amp;#34;: &amp;#34;CN&amp;#34;, &amp;#34;L&amp;#34;: &amp;#34;BeiJing&amp;#34;, &amp;#34;O&amp;#34;: &amp;#34;KFS&amp;#34;, &amp;#34;OU&amp;#34;: &amp;#34;CA&amp;#34;, &amp;#34;ST&amp;#34;: &amp;#34;BeiJing&amp;#34; } ] } 创建 ca.</description>
    </item>
    
    <item>
      <title>搭建 K8S Master</title>
      <link>http://example.org/kfs/v1.14.1/install-master/</link>
      <pubDate>Sun, 28 Apr 2019 12:40:00 +0800</pubDate>
      
      <guid>http://example.org/kfs/v1.14.1/install-master/</guid>
      <description>准备 从 mbp 登录 k8s-master-1 虚拟机：
ssh -v k8s-master-1 检查 /kfslab 目录是否挂载正确（也可以使用 rsync 同步）：
# ls /kfslab/ config install setting v1.14.1 vos 设置 K8S_MASTER_ROOT 环境变量和创建目录：
export K8S_MASTER_ROOT=&amp;#34;/root/lab&amp;#34; mkdir -pv $K8S_MASTER_ROOT 设置基本环境变量：
unalias cp cd $K8S_MASTER_ROOT cat &amp;gt; k8s-master-setting &amp;lt;&amp;lt;EOF KFS_HOME=/kfslab KFS_CONFIG=&amp;#34;\${KFS_HOME}/config&amp;#34; KFS_INSTALL=&amp;#34;\${KFS_HOME}/install&amp;#34; K8S_VERSION=v1.14.1 K8S_MASTER_ROOT=&amp;#34;/root/lab&amp;#34; EOF source k8s-master-setting 注意 每一次中断部署，再次返回，请先是环境变量生效：
export K8S_MASTER_ROOT=&amp;#34;/root/lab&amp;#34; cd $K8S_MASTER_ROOT source k8s-master-setting Master 部署 etcd 准备目录：
# 确保目录存在 mkdir -pv /etc/etcd # 拷贝证书 cd $KFS_CONFIG cp ca.</description>
    </item>
    
    <item>
      <title>搭建 K8S Node</title>
      <link>http://example.org/kfs/v1.14.1/install-node/</link>
      <pubDate>Sun, 28 Apr 2019 12:40:00 +0800</pubDate>
      
      <guid>http://example.org/kfs/v1.14.1/install-node/</guid>
      <description>准备 下载软件包 说明 在 mbp 下载需要的软件包到 $KFS_INSTALL/node 目录。
 runc CNI plugins cri-tools containerd kube-proxy kubelet  cd $KFS_INSTALL/node wget -q --show-progress --https-only --timestamping \  https://github.com/opencontainers/runc/releases/download/v1.0.0-rc8/runc.amd64 \  https://github.com/containernetworking/plugins/releases/download/v0.7.5/cni-plugins-amd64-v0.7.5.tgz \  https://github.com/kubernetes-sigs/cri-tools/releases/download/v1.14.0/crictl-v1.14.0-linux-amd64.tar.gz \  https://github.com/containerd/containerd/releases/download/v1.2.6/containerd-1.2.6.linux-amd64.tar.gz 说明
 上面 wget 用法在 MacOS 下才可以  网络 Kubernetes 通常使用一个扁平的网络空间（所有 pod 之间网络互动，无论在不在同一个节点），最简单的是 flannel 。
如果您想要深入理解网络配置，请参考 Flannel From Scratch 提前在所有节点手动部署好 flannel 。 只需要 kubernetes 集群的 etcd 服务搭建好了之后，就可以部署各个节点的 flanneld 服务。
Node 部署 说明
 本章流程如无特殊说明，需要在 k8s-node-1 和 k8s-node-2 上都进行。 下面示例中，遇到特定主机名等信息，以 k8s-node-1 为例。请修改为正在部署节点的具体信息。  设置环境变量 设置 K8S_NODE_ROOT 环境变量和创建目录：</description>
    </item>
    
  </channel>
</rss>